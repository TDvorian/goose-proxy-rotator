#!/usr/bin/env node

"use strict";

    var JFile=require('jfile');

    var fs = require('fs');
let proxies = [];
var _ = require('lodash');

const async = require('async');

const request = require('request');

let getProxies = function(i, callback){
    request('',
     function (error, response, body) {
        if(!error && response && response.statusCode ===200) {
            let json = JSON.parse(body);
            json.forEach(function(proxy){
                proxies.push({
                    host: proxy.ip,
                    port: proxy.port  
                })
            });
            callback();
        }else{
            callback(error|| response && response.statusCode)
            console.log('error:', error); // Print the error if one occurred
            console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received
        }
})
}


async.timesSeries(40, getProxies, function(err){
    // if any of the saves produced an error, err would equal that error


    const { execSync } = require('child_process');
    execSync('rm -f PROXY.txt');
    execSync('sh g.sh');
    var myF=new JFile("PROXY.txt");
    myF.lines.forEach(function(proxy) {
        var parsed = parseInt(roxy.split(":")[1], 10);
        if (isNaN(parsed)) {
            return; }
     let p = {host: proxy.split(":")[0],
     port: parsed}
     proxies.push(p);
    });
    let pro = _.uniqBy(proxies, 'host')
    var file = fs.createWriteStream('cache_peers.conf');
    file.on('error', function(err) { /* error handling */ });
    console.log('download '+ pro.length +' proxys');
    var proxies= [];
    pro.forEach(function(v) {
    var parsed = parseInt(v.port, 10);
    proxies.push(v.host + ":" + parsed );

     file.write("cache_peer " + v.host + " parent " + parsed + " 0 round-robin no-query no-digest" + '\n'); });
    file.end();
    
    var postData = {
        servers: proxies
    }

    var url = 'http://127.0.0.1:3000/proxy'
    var options = {
      method: 'post',
      body: postData,
      json: true,
      url: url
    }
    request(options, function (err, res, body) {
      if (err) {
        console.error('error posting json: ', err)
        throw err
      }
      var headers = res.headers
      var statusCode = res.statusCode
      console.log('headers: ', headers)
      console.log('statusCode: ', statusCode)
      console.log('body: ', body)
    })



});



